/**
 * @file    {{HEADER_NAME}}
 * @author  YJ Studio Team (Generated by Advanced PID Code Generator)
 * @version 2.3.0
 * @date    {{TIMESTAMP}}
 * @brief   Fully-Featured Advanced PID Controller Library Header File.
 *
 * @details This file contains the type definitions, structure definitions,
 * and function declarations for a professional-grade PID controller.
 * New in v2.3.0: Full runtime parameter setting, dynamic sample time
 * computation, and access to internal PID components for debugging.
 */

#ifndef __PID_H_ADVANCED_TEMPLATE__
#define __PID_H_ADVANCED_TEMPLATE__

#include <stdint.h>
#include <stdbool.h>
#include <math.h>

#ifdef __cplusplus
#define SFX_F {{SFX}}
#else
#define SFX_F {{SFX}}
#endif

#ifndef INFINITY
    #define INFINITY (1.0f/0.0f)
#endif

typedef enum {
    PID_MODE_MANUAL    = 0,
    PID_MODE_AUTOMATIC = 1
} PID_ModeType;

typedef enum {
    PID_TYPE_STANDARD = 0,
    PID_TYPE_PI_D     = 1,
    PID_TYPE_I_PD     = 2
} PID_Type;

typedef enum {
    PID_MODE_POSITION = 0,
    PID_MODE_VELOCITY = 1
} PID_WorkMode;

/**
 * @brief PID控制器句柄结构体
 * @details 该结构体包含了单个PID控制器实例所需的所有参数、状态变量和配置信息。
 */
typedef struct {
    /* 控制器增益与系数 */
    {{DATA_TYPE}} Kp;               /**< 比例增益 (Proportional Gain) */
    {{DATA_TYPE}} Ki;               /**< 积分增益 (Integral Gain, 离散形式: Ki_continuous * SampleTime) */
    {{DATA_TYPE}} Kd;               /**< 微分增益 (Derivative Gain, 离散形式: Kd_continuous / SampleTime) */
    {{DATA_TYPE}} Kff;              /**< 前馈增益 (Feedforward Gain) */
    {{DATA_TYPE}} ff_weight;        /**< 前馈项权重 (0.0 到 1.0) */

    /* 运行限制与阈值 */
    {{DATA_TYPE}} output_limit;     /**< 控制器输出的绝对值限幅 (例如, 100 表示输出范围为 +/-100) */
    {{DATA_TYPE}} integral_limit;   /**< 积分累加器的绝对值限幅 */
    {{DATA_TYPE}} output_ramp;      /**< 输出变化率限制 (单位/秒), 0表示无限制 */
    {{DATA_TYPE}} deadband;         /**< 误差死区范围 (当 |error| < deadband/2 时, 误差被视为0) */
    {{DATA_TYPE}} integral_separation_threshold; /**< 积分分离阈值 (当 |error| < 此值时, 积分项才生效) */

    /* 滤波器系数 */
    {{DATA_TYPE}} d_filter_coef;    /**< 微分项的低通滤波器系数 (0.0 到 1.0, 0表示无滤波) */
    {{DATA_TYPE}} input_filter_coef;/**< 测量值(输入)的低通滤波器系数 (0.0 到 1.0, 0表示无滤波) */
    {{DATA_TYPE}} setpoint_filter_coef; /**< 设定值的低通滤波器系数 (0.0 到 1.0, 0表示无滤波) */

    /* 状态变量 - 内部使用, 通常不直接修改 */
    {{DATA_TYPE}} integral;         /**< 积分累加器当前值 */
    {{DATA_TYPE}} prev_error;       /**< 上一个计算周期的误差 */
    {{DATA_TYPE}} prev_measure;     /**< 上一个计算周期的测量值 */
    {{DATA_TYPE}} prev_output;      /**< 上一个计算周期的控制器输出值 */
    {{DATA_TYPE}} filtered_d;       /**< 经过滤波后的微分项值 */
    {{DATA_TYPE}} filtered_measure; /**< 经过滤波后的测量值 */
    {{DATA_TYPE}} filtered_setpoint;/**< 经过滤波后的设定值 */
    {{DATA_TYPE}} output;           /**< 当前控制器计算出的输出值 */

    /* 时间变量 */
    {{DATA_TYPE}} sample_time;      /**< 控制器采样时间 (单位: 秒) */
    uint32_t      last_time;        /**< 上次计算时的时间戳 (单位: 毫秒, 用于动态采样时间) */

    /* 控制器配置 */
    PID_ModeType mode;              /**< 当前运行模式 (手动/自动), 详见 @ref PID_ModeType */
    PID_Type     type;              /**< PID计算类型 (标准, PI-D, I-PD), 详见 @ref PID_Type */
    PID_WorkMode work_mode;         /**< PID输出类型 (位置式/速度式), 详见 @ref PID_WorkMode */

    /* 高级功能占位符 */
    bool adaptive_enable;           /**< (占位符) 是否启用自适应控制 */
    bool fuzzy_enable;              /**< (占位符) 是否启用模糊控制 */

    /* 调试信息 */
    {{DATA_TYPE}} last_p_term;      /**< 上次计算的比例项 (P) 的值 */
    {{DATA_TYPE}} last_i_term;      /**< 上次计算的积分项 (I) 的值 (即当前积分累加器的值) */
    {{DATA_TYPE}} last_d_term;      /**< 上次计算的微分项 (D) 的值 */
    {{DATA_TYPE}} last_ff_term;     /**< 上次计算的前馈项 (FF) 的值 */

} {{STRUCT_NAME}};

/* --- Public Function Declarations --- */

void {{FUNCTION_PREFIX}}_Init({{STRUCT_NAME}} *pid, {{DATA_TYPE}} Kp_continuous, {{DATA_TYPE}} Ki_continuous, {{DATA_TYPE}} Kd_continuous, {{DATA_TYPE}} sample_time_val);
void {{FUNCTION_PREFIX}}_SetTunings({{STRUCT_NAME}} *pid, {{DATA_TYPE}} Kp_continuous, {{DATA_TYPE}} Ki_continuous, {{DATA_TYPE}} Kd_continuous);
void {{FUNCTION_PREFIX}}_SetFeedForwardParams({{STRUCT_NAME}} *pid, {{DATA_TYPE}} Kff, {{DATA_TYPE}} ff_weight);
void {{FUNCTION_PREFIX}}_SetSampleTime({{STRUCT_NAME}} *pid, {{DATA_TYPE}} sample_time_new);
void {{FUNCTION_PREFIX}}_SetOutputLimits({{STRUCT_NAME}} *pid, {{DATA_TYPE}} limit);
void {{FUNCTION_PREFIX}}_SetIntegralLimits({{STRUCT_NAME}} *pid, {{DATA_TYPE}} limit);
void {{FUNCTION_PREFIX}}_SetOutputRamp({{STRUCT_NAME}} *pid, {{DATA_TYPE}} rate);
void {{FUNCTION_PREFIX}}_SetDeadband({{STRUCT_NAME}} *pid, {{DATA_TYPE}} deadband_val);
void {{FUNCTION_PREFIX}}_SetIntegralSeparationThreshold({{STRUCT_NAME}} *pid, {{DATA_TYPE}} threshold);
void {{FUNCTION_PREFIX}}_SetDFilter({{STRUCT_NAME}} *pid, {{DATA_TYPE}} filter_coef);
void {{FUNCTION_PREFIX}}_SetInputFilter({{STRUCT_NAME}} *pid, {{DATA_TYPE}} filter_coef);
void {{FUNCTION_PREFIX}}_SetSetpointFilter({{STRUCT_NAME}} *pid, {{DATA_TYPE}} filter_coef);
void {{FUNCTION_PREFIX}}_SetMode({{STRUCT_NAME}} *pid, PID_ModeType mode);
void {{FUNCTION_PREFIX}}_SetType({{STRUCT_NAME}} *pid, PID_Type type);
void {{FUNCTION_PREFIX}}_SetWorkMode({{STRUCT_NAME}} *pid, PID_WorkMode work_mode);

/**
 * @brief Computes the PID output based on the current setpoint and measurement.
 * @note Call this function at regular intervals matching `sample_time`.
 */
{{DATA_TYPE}} {{FUNCTION_PREFIX}}_Compute({{STRUCT_NAME}} *pid, {{DATA_TYPE}} setpoint, {{DATA_TYPE}} measure);

/**
 * @brief Computes the PID output with a dynamically provided current time.
 * @param[in]     current_time_ms Current system time in milliseconds.
 * @note This function calculates the delta_time since the last call and adjusts gains.
 * Useful if call interval varies.
 * @return The calculated PID controller output.
 */
{{DATA_TYPE}} {{FUNCTION_PREFIX}}_ComputeWithTime({{STRUCT_NAME}} *pid, {{DATA_TYPE}} setpoint, {{DATA_TYPE}} measure, uint32_t current_time_ms);

void {{FUNCTION_PREFIX}}_Reset({{STRUCT_NAME}} *pid);
void {{FUNCTION_PREFIX}}_SetOutput({{STRUCT_NAME}} *pid, {{DATA_TYPE}} output_val);

/**
 * @brief Retrieves the last computed P, I, D, and FF term components.
 * @param[out] p_term Pointer to store the last proportional term. Can be NULL.
 * @param[out] i_term Pointer to store the current integral term. Can be NULL.
 * @param[out] d_term Pointer to store the last filtered derivative term. Can be NULL.
 * @param[out] ff_term Pointer to store the last feedforward term. Can be NULL.
 * @note Useful for debugging, tuning, and monitoring controller behavior.
 */
void {{FUNCTION_PREFIX}}_GetComponents({{STRUCT_NAME}} *pid, {{DATA_TYPE}} *p_term, {{DATA_TYPE}} *i_term, {{DATA_TYPE}} *d_term, {{DATA_TYPE}} *ff_term);

#endif /* __PID_H_ADVANCED_TEMPLATE__ */
